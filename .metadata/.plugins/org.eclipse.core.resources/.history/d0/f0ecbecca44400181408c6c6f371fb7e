package renderEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.lwjgl.opengl.EXTFramebufferObject;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL14;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;
import org.lwjgl.opengl.GL33;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector2f;

import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.opengl.EXTFramebufferObject.*;
import entities.Player;
import game.Game;
import guis.GuiTexture;
import entities.Entity;
import entities.Light;
import models.TexturedModel;
import shaders.StaticShader;
import shaders.TerrainShader;
import shaders.WireShader;
import water.WaterRenderer;
import water.WaterShader;
import water.WaterTile;
import world.Terrain;

public class MasterRenderer {
		private static final float NEAR_PLANE = 0.1f;
		private static final float FAR_PLANE = 10000;
		
		private Matrix4f projectionMatrix;

		private StaticShader shader = new StaticShader();
		private EntityRenderer renderer;
		private TerrainRenderer terrainRenderer;
		private TerrainShader terrainShader = new TerrainShader();
		private WireShader wireShader = new WireShader();
		private WaterShader waterShader = new WaterShader();
		private WaterRenderer waterRenderer;
		
		int bloomBufferID;
		
		int frameBufferID;
		int depthRenderBufferID;
		
		Map<TexturedModel, List<Entity>> entities = new HashMap<TexturedModel, List<Entity>>();
		private List<Terrain> terrains = new ArrayList<Terrain>();
		private List<WaterTile> waters = new ArrayList<WaterTile>();
		
		public MasterRenderer() {
			GL11.glEnable(GL11.GL_CULL_FACE);
			GL11.glCullFace(GL11.GL_BACK);
			createProjectionMatrix();
			renderer = new EntityRenderer(shader, this);
			terrainRenderer = new TerrainRenderer(terrainShader, wireShader);
			waterRenderer = new WaterRenderer(waterShader);
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, bloomBufferID);
			bloomBufferID = glGenFramebuffersEXT();
		}
		
		public void render(Light sun, Player camera) {
			//Actual render pass
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
			prepare();
			shader.start();
			shader.loadLight(sun);
			shader.loadViewMatrix(camera);
			shader.loadProjectionMatrix(projectionMatrix);
			renderer.render(entities);
			shader.stop();
			
			terrainShader.start();
			terrainShader.loadLight(sun);
			terrainShader.loadViewMatrix(camera);
			terrainShader.loadProjectionMatrix(projectionMatrix);
			terrainRenderer.preRender(terrains);
			terrainRenderer.render(terrains);
			terrainShader.stop();

			GL11.glEnable (GL11.GL_BLEND);
			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
			wireShader.start();
			wireShader.loadViewMatrix(camera);
			wireShader.loadProjectionMatrix(projectionMatrix);
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_LINE);
			terrainRenderer.preRender(terrains);
			terrainRenderer.renderWire(terrains);
			wireShader.stop();
			terrains.clear();
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_FILL);
			
			waterShader.start();
			waterShader.loadViewMatrix(camera);
			waterShader.loadProjectionMatrix(projectionMatrix);
			waterRenderer.render(waters);
			waters.clear();
			waterShader.stop();
			//Clear
			
			entities.clear();
		}
		
		void FBORender(Light sun, Player camera) {
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, frameBufferID);
			depthRenderBufferID = glGenRenderbuffersEXT();
			// initialize depth renderbuffer
			glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, depthRenderBufferID); // bind the depth renderbuffer
			glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, GL14.GL_DEPTH_COMPONENT24, 1366, 768); // get the data space for it
			glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT,GL_DEPTH_ATTACHMENT_EXT,GL_RENDERBUFFER_EXT, depthRenderBufferID); // bind it to the renderbuffer
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
			// FBO render pass
			glViewport (0, 0, 1366, 768);
			glBindTexture(GL_TEXTURE_2D, 0);
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, frameBufferID);
			
			//FBO render pass
			prepare();
			shader.start();
			shader.loadLight(sun);
			shader.loadViewMatrix(camera);
			shader.loadProjectionMatrix(projectionMatrix);
			renderer.render(entities);
			shader.stop();
			
			terrainShader.start();
			terrainShader.loadLight(sun);
			terrainShader.loadViewMatrix(camera);
			terrainShader.loadProjectionMatrix(projectionMatrix);
			terrainRenderer.preRender(terrains);
			terrainRenderer.render(terrains);
			terrainShader.stop();

			GL11.glEnable (GL11.GL_BLEND);
			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
			wireShader.start();
			wireShader.loadViewMatrix(camera);
			wireShader.loadProjectionMatrix(projectionMatrix);
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_LINE);
			terrainRenderer.preRender(terrains);
			terrainRenderer.renderWire(terrains);
			wireShader.stop();
			//terrains.clear();
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_FILL);
			
			renderBloom(camera);
			
			waterShader.start();
			waterShader.loadViewMatrix(camera);
			waterShader.loadProjectionMatrix(projectionMatrix);
			waterRenderer.render(waters);
			//waters.clear();
			waterShader.stop();
		}
		
		public void processTerrain(Terrain terrain) {
			terrains.add(terrain);
		}
		
		public void processEntity(Entity entity) {
			TexturedModel entityModel = entity.getModel();
			List<Entity> batch = entities.get(entityModel);
			if(batch != null) {
				batch.add(entity);
			} else {
				List<Entity> newBatch = new ArrayList<Entity>();
				newBatch.add(entity);
				entities.put(entityModel, newBatch);
			}
		}
		
		public void processWater(WaterTile entity) {
			waters.add(entity);
		}
		
		public void prepare() {
			createProjectionMatrix();
			GL11.glEnable(GL11.GL_DEPTH_TEST);
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
			GL11.glClearColor(0.06f, 0, 0.14f, 1f);
		}
		
		private void createProjectionMatrix(){
			float aspectRatio = (float) DisplayManager.getDimensions().getWidth() / (float) DisplayManager.getDimensions().getHeight();
			float y_scale = (float) ((1f / Math.tan(Math.toRadians(DisplayManager.FOV / 2f))) * aspectRatio);
			float x_scale = y_scale / aspectRatio;
			float frustum_length = FAR_PLANE - NEAR_PLANE;

			projectionMatrix = new Matrix4f();
			projectionMatrix.m00 = x_scale;
			projectionMatrix.m11 = y_scale;
			projectionMatrix.m22 = -((FAR_PLANE + NEAR_PLANE) / frustum_length);
			projectionMatrix.m23 = -1;
			projectionMatrix.m32 = -((2 * NEAR_PLANE * FAR_PLANE) / frustum_length);
			projectionMatrix.m33 = 0;
		}
		
		void renderBloom(Player camera) {
			// The framebuffer, which regroups 0, 1, or more textures, and 0 or 1 depth buffer.
			int FramebufferName = glGenFramebuffersEXT();
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, FramebufferName);
			// The texture we're going to render to
			int renderedTexture;
			renderedTexture = glGenTextures();
			glBindTexture(GL_TEXTURE_2D, renderedTexture);
			glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 1366, 768, 0, GL_RGB, GL_UNSIGNED_BYTE, 0);
			int depthrenderbuffer = glGenRenderbuffersEXT();
			glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, depthrenderbuffer);
			glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, GL_DEPTH_COMPONENT, 1366, 768);
			glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, depthrenderbuffer);
			glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, renderedTexture, 0);
			
			GL11.glEnable (GL11.GL_BLEND);
			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
			wireShader.start();
			wireShader.loadViewMatrix(camera);
			wireShader.loadProjectionMatrix(projectionMatrix);
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_LINE);
			terrainRenderer.preRender(terrains);
			terrainRenderer.renderWire(terrains);
			wireShader.stop();
			GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK, GL11.GL_FILL);
			
			glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
			Game.guiRenderer.render(new GuiTexture(renderedTexture, new Vector2f(0.5f, 0), new Vector2f(1, 1)));
		}
		
		public void cleanUp() {
			shader.cleanUP();
			terrainShader.cleanUP();
			wireShader.cleanUP();
		}
		public Matrix4f getProjectionMatrix() {
			return projectionMatrix;
		}
		public Map<TexturedModel, List<Entity>> entityMap(){
			return entities;
		}
}
