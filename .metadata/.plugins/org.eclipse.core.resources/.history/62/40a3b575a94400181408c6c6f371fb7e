#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector[];
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[];

void main(void){
	vec4 actualPosition = transformationMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * viewMatrix * actualPosition;
	pass_textureCoordinates = textureCoordinates;
	
	toLightVector = vec3[lightPosition.length];
	for(int i = 0; i < lightPosition.length; i++) {
		toLightVector[i] = lightPosition[i] - actualPosition.xyz;
	}
	surfaceNormal = vec3((transformationMatrix * vec4(normal, 0.0)));
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - actualPosition.xyz;
}